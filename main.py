#IMPORTS
import telebot
from googletrans import Translator
from telebot import types
from Class.weather_class import Weather
import consts as keys
from APIs.user_data import generate_user_data
from APIs.Weather import get_weather
from Class.user import UserData

#CREATE BOT
bot = telebot.TeleBot(keys.TELEGRAM_KEY)

#INITIALIZATION TRANSLATOR 
translator = Translator()

#MENU
@bot.message_handler(commands=["start"])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2 )
    start = types.KeyboardButton('–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—Ç–∞–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üåê')
    weather = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚òÄÔ∏è')
    help = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞üìù')
    markup.add(start, help,weather)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.first_name}</b>, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ <b>Weather BOT</b>üòäüòâÔ∏è'
                                      f'\n–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É, –≤–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:\n ', reply_markup=markup, parse_mode='html')

#CREATE INFO
@bot.message_handler(regexp="/hacker|–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—Ç–∞–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üåê")
def create_user_info(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Button = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
    markup.add(Button)
    data =  UserData(generate_user_data())
    # data = User(generate_user_data())
    if data:
        # print(User(data))
        response = (
                f"<b>–†—ñ–¥:</b> {translator.translate(data.gender, src='en', dest='uk').text}\n\n"
                f"<b>–Ü–º'—è:</b> {data.name_title} {data.name_first} {data.name_last}\n"
                f"<b>–ü–æ–≤–Ω–∏—Ö —Ä–æ–∫—ñ–≤:</b> {data.age}\n" 
                f"<b>–ê–¥—Ä–µ—Å–∞:</b> {data.street_number} {data.street_name}, {data.city}, {data.state}, {data.country}\n"
                f"<b>–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å:</b> {data.postcode}\n\n"
                f"<b>Email:</b> {data.email}\n"
                f"          <b>Username:</b> {data.username}\n"
                f"          <b>Password:</b>  {data.password}\n\n"
                f"<b>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</b> {data.dob_date}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.phone}\n"
                f"<b>–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {data.cell}\n"
        )

        bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode='html')
        bot.register_next_step_handler(message, get_weather_by_city)
    else:
        bot.send_message(message.chat.id, "–û—Ö, –≤–∏–±–∞—á—Ç–µ, —â–æ—Å—å –ø—ñ—â–ª–æ –Ω–µ —Ç–∞–∫")

#WEATHER COMMAND
@bot.message_handler(regexp="/weather|–ü–æ–≥–æ–¥–∞‚òÄÔ∏è")
def find_city_for_weather(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Button = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
    markup.add(Button)
    mess = '–ü–æ–≥–æ–¥—É —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏?'
    bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode='html')
    bot.register_next_step_handler(message, get_weather_by_city)


def weather_check(message):
    if message.text == "‚Ü©Ô∏è–Ü–Ω—à–µ –º—ñ—Å—Ç–æ":
        find_city_for_weather(message)
    elif message.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†":
        menu(message)
    else:
        bot.send_message(message.chat.id,"–í–∏–±–∞—á—Ç–µ, –Ω–µ —Ä–æ–∑—É–º—ñ—é –ø—Ä–æ —â–æ –≤–∏üåö. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥—ñ—é")
        weather_check()


def get_weather_by_city(message):
    if message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        menu(message)
    else:
        if hasattr(message, 'text') and message.text:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            home = types.KeyboardButton('–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†')
            another_city = types.KeyboardButton('‚Ü©Ô∏è–Ü–Ω—à–µ –º—ñ—Å—Ç–æ')
            markup.add(another_city,home)
            city = message.text
            weather_data = get_weather(city)
            if weather_data:
                parsed_data = Weather(weather_data)
                print(parsed_data,"\n----------------------------")
                response = (
                    f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {translator.translate(parsed_data.name, src='en', dest='uk').text}</b>üåÉ —Å—Ç–∞–Ω–æ–º –Ω–∞ <i>{Weather.curentTime()}</i>:\n\n"
                    f"<b>–ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏üå•:</b> {translator.translate(parsed_data.weather.get('description', ''),src='en', dest='uk').text} \n"
                    f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°:</b> {parsed_data.main.get('temp', 0)}¬∞C\n"
                    f"<b>–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:</b> {parsed_data.main.get('feels_like', 0)}¬∞C\n"
                    f"<b>–í–æ–ª–æ–≥—ñ—Å—Ç—å:</b> {parsed_data.main.get('humidity', 0)}%\n"
                    f"<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—Éüí®:</b> {parsed_data.wind.get('speed', 0)} –º/—Å\n\n"
                    f"<b>–°–≤—ñ—Ç–∞–Ω–æ–∫üåÖ:</b> {Weather.timestampToHoursMinutes(parsed_data.sys.get('sunrise', 0))}\n"
                    f"<b>–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—èüåÜ:</b> {Weather.timestampToHoursMinutes(parsed_data.sys.get('sunset', 0))}\n"

                )
                bot.send_message(message.chat.id, response,reply_markup=markup, parse_mode='html')
                bot.register_next_step_handler(message, weather_check)
            else:
                bot.send_message(message.chat.id, f"–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ {city}. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É:")
                bot.register_next_step_handler(message, get_weather_by_city)

        else:
            bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            bot.register_next_step_handler(message, get_weather_by_city)

#INFO
@bot.message_handler(regexp="/info|–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞üìù")
def info(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    Button = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
    markup.add(Button)
    mess = f'–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶\n' \
           f'–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ Weather BOTüòÅ. –Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n' \
           f'\n–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ—è–∫–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø—Ä—è–º–æ –≤ TelegramüòâüôÉ.\n' \
           f'\n–ê–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞ —î —Å—Ç—É–¥–µ–Ω—Ç–∫–∞ –≥—Ä—É–ø–∏ –ü–ü-27 \n–°–æ—Ö–∞–Ω—Å—å–∫–∞ –í—ñ–∫—Ç–æ—Ä—ñ—è –Æ—Ä—ñ—ó–≤–Ω–∞üòé\n' \
           f'aka @Vikkii02\n' \
           f'\n\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —è–∫–æ—Å—å –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ü–µ–π –ø—Ä–æ–µ–∫—Ç —Ç–∞ –æ—Å–æ–±–∏—Å—Ç–æ —Ä–æ–∑—Ä–æ–±–Ω–∏—Ü—é, –Ω–∞–π–∫—Ä–∞—â–æ—é –¥–æ–ø–æ–º–æ–≥–æ—é –±—É–¥–µ –Ω–∞–π–≤–∏—â–∏–π –±–∞–ª –∑ –∫—É—Ä—Å–æ–≤–æ—ó ü§™\n' \
           
    bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode='html')

    def wait_for_back_button(message):
        if message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
            menu(message)  
        else:
            bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚¨ÖÔ∏è–ù–∞–∑–∞–¥'.")
            bot.register_next_step_handler(message, wait_for_back_button)  
    bot.register_next_step_handler(message, wait_for_back_button) 

#HOME PAGE
@bot.message_handler(regexp="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")
def home(message):
    menu(message)


#STICKER HANDLER
@bot.message_handler(content_types=['sticker'])
def sticker(message):
   bot.reply_to(message,'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüòï')

#START SERVER
print('Bot started')
bot.polling(none_stop=True)
